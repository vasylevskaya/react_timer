{"version":3,"sources":["Timer.js","App.js","reportWebVitals.js","index.js"],"names":["Timer","timer","status","setTimer","useEffect","unsubscribe$","Subject","interval","pipe","takeUntil","subscribe","value","next","complete","className","Date","toISOString","slice","App","useState","setStatus","start","useCallback","stop","reset","wait","e","setTimeout","detail","onClick","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PAMO,SAASA,EAAT,GAA6C,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,SAqBrC,OApBAC,qBACE,WACE,IAAMC,EAAe,IAAIC,IAUzB,OARAC,YAAS,KACNC,KAAKC,YAAUJ,IACfK,WAAU,WACM,YAAXR,GACFC,GAAS,SAAAQ,GAAK,OAAIA,EAAQ,UAIzB,WACLN,EAAaO,OACbP,EAAaQ,cAGjB,CAACX,IAID,qBAAKY,UAAU,YAAf,SACG,IAAIC,KAAKd,GAAOe,cAAcC,MAAM,GAAI,MCvBhC,SAASC,IACtB,MAA0BC,mBAAS,GAAnC,mBAAOlB,EAAP,KAAcE,EAAd,KACA,EAA4BgB,mBAAS,WAArC,mBAAOjB,EAAP,KAAekB,EAAf,KAEMC,EAAQC,uBAAY,kBAAMF,EAAU,aAAY,IAChDG,EAAOD,uBAAY,WACrBF,EAAU,WACVjB,EAAS,KAEX,IAGIqB,EAAQF,uBAAY,WACtBF,EAAU,WACVjB,EAAS,KAEX,IAGIsB,EAAOH,uBAAY,SAACI,GACxBC,YAAW,WACQ,IAAbD,EAAEE,QACJR,EAAU,aAEX,OAEH,IAGF,OACE,sBAAKN,UAAU,YAAf,UAEE,cAACd,EAAD,CACEC,MAAOA,EACPC,OAAQA,EACRC,SAAUA,IAGZ,sBAAKW,UAAU,oBAAf,UACc,YAAXZ,GACC,wBAAQY,UAAU,oBAAoBe,QAASR,EAA/C,mBAKU,YAAXnB,GACC,wBAAQY,UAAU,mBAAmBe,QAASN,EAA9C,kBAKF,wBACET,UAAU,oBACVe,QAASL,EACTM,SAAqB,YAAX5B,EAHZ,mBAOA,wBACEY,UAAU,oBACVe,QAASJ,EAFX,wBChER,IAYeM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cf1c2e2e.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { useEffect } from \"react\";\nimport { interval, Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\nimport PropTypes from 'prop-types';\n\nexport function Timer({ timer, status, setTimer }) {\n  useEffect(\n    () => {\n      const unsubscribe$ = new Subject(); // create a new subject\n\n      interval(1000) // create an obsarvable that emits sequential numbers every second\n        .pipe(takeUntil(unsubscribe$)) // the interval observable will emit values until unsubscribe emits a value\n        .subscribe(() => { // by subscribtion we connect the observer to the observable to execute a following code block\n          if (status === 'running') { // if status is 'running' we increase the timer by a second\n            setTimer(value => value + 1000);\n          }\n        });\n\n      return () => { // emiting a value of 'unsubscribe' to stop takeUntil\n        unsubscribe$.next();\n        unsubscribe$.complete();\n      };\n    },\n    [status] // useEffected callback is executed every time when status is changes\n  );\n\n  return (\n    <div className=\"timer box\">\n      {new Date(timer).toISOString().slice(11, 19)}\n    </div>\n  )\n}\n\nTimer.propTypes = {\n  timer: PropTypes.number.isRequired,\n  status: PropTypes.string.isRequired,\n  setTimer: PropTypes.func.isRequired,\n};\n","import { useCallback, useState } from \"react\";\nimport \"./App.css\";\nimport 'bulma/css/bulma.min.css';\n\nimport { Timer } from \"./Timer\";\n\nexport default function App() {\n  const [timer, setTimer] = useState(0); // timer value in ms\n  const [status, setStatus] = useState('stopped'); // timer status (running, stopped, waiting)\n\n  const start = useCallback(() => setStatus('running'), []);\n  const stop = useCallback(() => {\n      setStatus('stopped');\n      setTimer(0);\n    },\n    [],\n  );\n\n  const reset = useCallback(() => {\n      setStatus('running');\n      setTimer(0);\n    },\n    [],\n  );\n\n  const wait = useCallback((e) => {\n    setTimeout(() => { // if amount of clicks is 2 when 299 ms have passed we will set waiting status\n      if (e.detail === 2) {\n        setStatus('waiting');\n      }\n    }, 299);\n    },\n    [],\n  );\n\n  return (\n    <div className=\"container\">\n\n      <Timer\n        timer={timer}\n        status={status}\n        setTimer={setTimer}\n      />\n\n      <div className=\"container buttons\">\n        {status !== 'running' && (\n          <button className=\"button is-success\" onClick={start} >\n            Start\n          </button>\n          )\n        }\n        {status === 'running' && (\n          <button className=\"button is-danger\" onClick={stop}>\n            Stop\n          </button>\n          )\n        }\n        <button\n          className=\"button is-primary\"\n          onClick={reset}\n          disabled={status === 'stopped'}\n        >\n          Reset\n        </button>\n        <button\n          className=\"button is-primary\"\n          onClick={wait}\n        >\n          Wait\n        </button>\n      </div>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}